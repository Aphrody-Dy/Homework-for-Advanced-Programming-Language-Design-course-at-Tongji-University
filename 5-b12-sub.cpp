//
#include<iostream>
using namespace std;

/* 函数实现部分，{ }内的东西可以任意调整，目前的return 0只是一个示例，可改变 */

/* 不允许定义任何形式的外部全局、静态全局、宏定义、只读变量 */

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strlen(const char str[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i, n=0;
    for (i = 0;str[i] !='\0';i++) {
        if (str[i]) {
            n++;
        }
    }
    return n; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcat(char s1[], const char s2[])
{
    int L = tj_strlen(s1);
    for (int i = 0;i < tj_strlen(s2);i++) {
        s1[L + i] = s2[i];
    }
    s1[L + tj_strlen(s2)] = '\0';
    return 0; 
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strncat(char s1[], const char s2[], const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int L = tj_strlen(s1);
    for (int i = 0;i < (len < tj_strlen(s2) ? len : tj_strlen(s2));i++) {
        s1[L + i] = s2[i];
    }
    s1[L + len] = '\0';
    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcpy(char s1[], const char s2[])
{
    for (int i = 0;i < tj_strlen(s2);i++) {
        s1[i] = s2[i];
        s1[i + 1] = '\0';
    }
    return 0;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strncpy(char s1[], const char s2[], const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    for (int i = 0;i < (len<tj_strlen(s2)?len:tj_strlen(s2));i++) {
        if (s2[i] != '\0') {
            s1[i] = s2[i];
        }
        else {
            break;
        }
    }
    s1[tj_strlen(s1)] = '\0';
    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcmp(const char s1[], const char s2[])
{
    for (int i = 0;i < (tj_strlen(s1) > tj_strlen(s2) ? tj_strlen(s1) : tj_strlen(s2));i++) {
        if (s1[i] != s2[i]) {
            return s1[i] - s2[i];
        }
    }
    return 0;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcasecmp(const char s1[], const char s2[])
{
    int i = 0;
    int d = 'a' - 'A';
    for (i = 0;i < (tj_strlen(s1) > tj_strlen(s2) ? tj_strlen(s1) : tj_strlen(s2));i++) {
        if (s1[i]!=s2[i]) {
            if (s1[i] >= int('A') && s1[i] <= int('Z')) {
                if (s1[i] + d == int(s2[i])) {
                    continue;
                }
                else {
                    return s1[i] + d - s2[i];
                }
            }
            if (s2[i] >= int('A') && s2[i] <= int('Z')) {
                if (s2[i] + d == int(s1[i])) {
                    continue;
                }
                return s1[i] - s2[i] - d;
            }
            return s1[i] - s2[i];
        }
    }
    return 0;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strncmp(const char s1[], const char s2[], const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    for (int i = 0;i < len;i++) {
        if (s1[i] == '\0' && s2[i] == '\0') {
            break;
        }
        if (s1[i] != s2[i]) {
            return s1[i] - s2[i];
        }
    }
    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcasencmp(const char s1[], const char s2[], const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i = 0;
    int d = 'a' - 'A';
    int L1 = tj_strlen(s1) > tj_strlen(s2) ? tj_strlen(s1) : tj_strlen(s2);
    int L = L1 < len ? L1 : len;
    for (i = 0;i < L;i++) {
        if (s1[i] != s2[i]) {
            if (s1[i] >= int('A') && s1[i] <= int('Z')) {
                if (s1[i] + d == int(s2[i])) {
                    continue;
                }
                else {
                    return s1[i] + d - s2[i];
                }
            }
            if (s2[i] >= int('A') && s2[i] <= int('Z')) {
                if (s2[i] + d == int(s1[i])) {
                    continue;
                }
                return s1[i] - s2[i] - d;
            }
            return s1[i] - s2[i];
        }
    }
    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strupr(char str[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    for (int i = 0;i < tj_strlen(str);i++) {
        if (int(str[i]) >= int('a') && int(str[i]) <= int('z')) {
            str[i] = (str[i]-int('a' - 'A'));
        }
    }
    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strlwr(char str[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    for (int i = 0;i < tj_strlen(str);i++) {
        if (int(str[i]) >= int('A') && int(str[i]) <= int('Z')) {
            str[i] = (str[i] + int('a' - 'A'));
        }
    }
    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strchr(const char str[], char ch)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    for (int i = 0;i < tj_strlen(str);i++) {
        if (str[i] == ch) {
            return i + 1;
        }
    }
    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strstr(const char str[], const char substr[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    for (int i = 0;i < tj_strlen(str);i++) {
        if (str[i] == substr[0]) {
            int n = 0;
            for (int j = 0;j < tj_strlen(substr);j++) {
                if (str[i + j] == substr[j]) {
                    n++;
                    if (n == tj_strlen(substr)) {
                        return i + 1;
                    }
                }
                else {
                    break;
                }
            }
        }
    }
    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strrchr(const char str[], const char ch)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    for (int i = 0;i < tj_strlen(str);i++) {
        if (str[tj_strlen(str)-1-i] == ch) {
            return tj_strlen(str) - i;
        }
    }
    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strrstr(const char str[], const char substr[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    for (int i = 0;i < tj_strlen(str);i++) {
        if (str[tj_strlen(str)-1-i] == substr[tj_strlen(substr)-1]) {
            int n = 0;
            for (int j = 0;j < tj_strlen(substr);j++) {
                if (str[tj_strlen(str) - 1 - i-j] == substr[tj_strlen(substr) - 1-j]) {
                    n++;
                    if (n == tj_strlen(substr)) {
                        return tj_strlen(str) - i - j;
                    }
                }
                else {
                    break;
                }
            }
        }
    }
    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strrev(char str[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    for (unsigned int i = 0;i < (strlen(str)/2+strlen(str)%2);i++) {
        char t = str[i];
        str[i] = str[strlen(str) - 1 - i];
        str[strlen(str) - 1 - i] = t;
    }
    return 0; //return值可根据需要修改
}
